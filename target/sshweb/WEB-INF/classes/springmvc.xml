<?xml version="1.0" encoding="UTF-8"?>
<!--suppress ALL -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

    <mvc:annotation-driven conversion-service="conversionService"/>

    <!-- 让springmvc自动识别静态资源，js，css，图片，如果是静态资源，就不要用视图解析器去解析它 -->
    <mvc:default-servlet-handler/>

    <context:component-scan base-package="cn.ljb.sshweb" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!--springmvc视图解析器-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>
    </bean>

    <!--配置自定义的数据类型转换器-->
    <!--ConversionServiceFactoryBean只会进行数据类型的转换-->
    <!--FormattingConversionServiceFactoryBean既可以进行数据类型的转换，又可以格式化数据-->
    <!--<bean id="conversionService" class="org.springframework.context.support.ConversionServiceFactoryBean">-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--将新的自定义的数据转换器类 注册进springmvc容器-->
        <property name="converters">
            <set>
                <bean class="cn.ljb.sshweb.web.StringConvertUser"></bean>
            </set>
        </property>
    </bean>

    <!--配置国际化的资源文件-->
    <bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
        <property name="basename" value="i18n"/>
    </bean>

    <!--SpringMVC上下文中默认没有装配 MultipartResolver,因此默认情况下其不能处理文件上传工作.
        如果想使用 Spring的文件上传功能,则需要在上下文中配置MultipartResolver.
        在 springmvc-config.xm进行配置文件如下:-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--设置上传文件大小上限，单位为字节（10MB）-->
        <property name="maxUploadSize">
            <value>10485760</value>
        </property>
        <!--设置请求的编码格式，必须和JSP的pageEncoding属性一致-->
        <property name="defaultEncoding">
            <value>UTF-8</value>
        </property>
    </bean>

    <!--配置springmvc拦截器-->
<!--    <mvc:interceptors>-->
<!--        &lt;!&ndash;这样子配置拦截器，会拦截所有controller类里的所有方法&ndash;&gt;-->
<!--        <bean class="cn.ljb.sshweb.web.HandlerInterceptor1"></bean>-->
<!--        <bean class="cn.ljb.sshweb.web.HandlerInterceptor2"></bean>-->
<!--    </mvc:interceptors>-->
    <!--对 SpringMVC配置文件里拦截器配置在深入一点点:-->
<!--    <mvc:interceptors>-->
<!--        <mvc:interceptor>-->
<!--            这个拦截器只在这个路径器作用-->
<!--            <mvc:mapping path="/users"/>-->
<!--            <bean class="cn. ybzy springmvcdemo web HandlerInterceptor1"></bean>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->
<!--    <mvc:interceptors>-->
<!--        <mvc:interceptor>-->
<!--            拦献所有的请求,这个必须写在前面,也就是写在[不拦截]的上面-->
<!--            <mvc:mapping path="/**"/>-->
<!--       排除:<mvc:exclude-mapping path="/ users"/> 但是排除这个路径-->
<!--            <bean class="cn. ybzy springmvcdemo web HandLerInterceptor1"></bean>-->
<!--        </mvc:interceptor>-->
<!--    </mvc:interceptors>-->
<!--    注意:顺序必须这样,前要拦截的,然后排除出去的,最后-->


    <!--配置全局异常处理的处理器-->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="exception"/><!--异常信息的引用名-->
        <property name="exceptionMappings">
            <props>
                <prop key="java.lang.ArithmeticException">error</prop><!--error是jsp页面的名字error.jsp-->
                <prop key="java.lang.RuntimeException">error</prop>
            </props>
        </property>
    </bean>

</beans>